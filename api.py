import argparse
from utils import *

def cot(question):

    args = parse_arguments()

    decoder = Decoder()

    # 将method赋值给args.method，表示要使用的方法

    x = "Q: " + question + "\n" + "A:"
    # 打印一些分隔符和提示信息，表示要测试的问题
    print('*****************************')
    print("Test Question:")
    print(question)
    print('*****************************')
    args.demo_path = "demos/multiarith.json"

    demo = create_demo_text(args,cot=True)
    x = demo + x + " " + args.cot_trigger

    # 打印一些分隔符和提示信息，表示要输入的提示
    print("Prompted Input:")
    # 打印x，将多余的换行符替换为单个换行符，去掉两边的空格
    print(x.replace("\n\n", "\n").strip())
    print('*****************************')
    z = decoder.decode(args, x)  # z = w
    # 将z中的多余的换行符替换为单个换行符，再将换行符替换为空，去掉两边的空格，赋值给z
    z = z.replace("\n\n", "\n").replace("\n", "").strip()
    pred = z
    print("Output:")
    print(pred)
    print('*****************************')



def parse_arguments():


    parser = argparse.ArgumentParser(description="CoT")

    parser.add_argument("--random_seed", type=int, default=1, help="random seed")

    parser.add_argument("--dataset", type=str, default="test", help="dataset used for experiment")

    parser.add_argument("--demo_path", type=str, default="demos/multiarith.json",
                        help="pre-generated demos used for experiment")

    parser.add_argument("--resume_id", type=int, default=0,
                        help="resume from which question id (current line number in the output file), if the experiment fails accidently (e.g., network error)")

    parser.add_argument("--minibatch_size", type=int, default=1,
                        help="minibatch size should be 1 because GPT-3 API takes only 1 input for each request")

    parser.add_argument("--max_num_worker", type=int, default=0, help="maximum number of workers for dataloader")

    parser.add_argument("--model", type=str, default="chatglm2-6b", choices=["chatglm2-6b"],
                        help="model used for decoding. Note that 'gpt3' are the smallest models.")

    parser.add_argument("--method", type=str, default="cot", help="method")

    parser.add_argument("--api_time_interval", type=float, default=0.0,
                        help="sleep between runs to avoid excedding the rate limit of openai api")

    parser.add_argument("--temperature", type=float, default=0.97, help="temperature for chatglm")

    parser.add_argument(
        "--task", type=str, default="multiarith_manual", help="dataset used for experiment")

    parser.add_argument(
        "--max_ra_len", type=int, default=5, help="maximum number of reasoning chains"
    )
    parser.add_argument(
        "--pred_file", type=str, default="demos/multiarith.json",
        help="use the reasoning chains generated by zero-shot-cot."
    )

    parser.add_argument(
        "--demo_save_dir", type=str, default="D:/work/auto-cot-main/multiarith.json",
        help="where to save the contructed demonstrations"
    )

    parser.add_argument(
        "--encoder", type=str, default="all-MiniLM-L6-v2", help="which sentence-transformer encoder for clustering"
    )
    parser.add_argument(
        "--sampling", type=str, default="center", help="whether to sample the cluster center first"
    )
    parser.add_argument(
        "--debug", type=bool, default=True, help="debug mode"
    )
    args = parser.parse_args()

    args.cot_trigger = "请一步步进行推理并得出结论."

    return args